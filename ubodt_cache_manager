#!/bin/bash

# UBODT Cache Manager Script
# This script provides a simple interface for managing UBODT cache without blocking the terminal

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
UBODT_READ="$SCRIPT_DIR/build/ubodt_read"
SOCKET_PATH="/tmp/fmm_ubodt_daemon.sock"
LOG_FILE="/tmp/ubodt_manager.log"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_message() {
    local level=$1
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo -e "${timestamp} [${level}] ${message}" | tee -a "$LOG_FILE"
}

print_status() {
    echo -e "${BLUE}=== UBODT Cache Manager Status ===${NC}"

    # Check if daemon is running
    if [ -S "$SOCKET_PATH" ]; then
        echo -e "${GREEN}✓${NC} Cache daemon is running"

        # Try to get cache status
        if echo "STATUS" | nc -U "$SOCKET_PATH" 2>/dev/null; then
            echo -e "${GREEN}✓${NC} Cache is responding"
        else
            echo -e "${YELLOW}⚠${NC} Cache daemon is running but not responding"
        fi
    else
        echo -e "${RED}✗${NC} Cache daemon is not running"
    fi

    # Check cache files
    if [ -d "/tmp/fmm_ubodt_cache" ]; then
        local cache_count=$(find "/tmp/fmm_ubodt_cache" -name "*.txt" -type f | wc -l)
        echo -e "${GREEN}✓${NC} Cache directory exists with $cache_count state files"
    else
        echo -e "${YELLOW}⚠${NC} Cache directory not found"
    fi

    echo
}

start_cache() {
    local ubodt_file="$1"
    local multiplier="${2:-50000}"
    local max_memory="${3:-0}"

    echo -e "${BLUE}=== Starting UBODT Cache ===${NC}"

    if [ -z "$ubodt_file" ]; then
        echo -e "${RED}Error: UBODT file path is required${NC}"
        echo "Usage: $0 start <ubodt_file> [multiplier] [max_memory_mb]"
        return 1
    fi

    if [ ! -f "$ubodt_file" ]; then
        echo -e "${RED}Error: UBODT file '$ubodt_file' not found${NC}"
        return 1
    fi

    # Build command arguments
    local cmd_args="--ubodt \"$ubodt_file\" --multiplier $multiplier"
    if [ "$max_memory" -gt 0 ]; then
        cmd_args="$cmd_args --max_memory $max_memory"
    fi

    # Start daemon in background
    log_message "INFO" "Starting UBODT cache daemon with file: $ubodt_file"

    # Start daemon runner in background
    nohup "$SCRIPT_DIR/build/ubodt_daemon_runner" >/dev/null 2>&1 &
    local daemon_pid=$!

    # Wait a moment for daemon to start
    sleep 2

    # Check if daemon is responsive
    if [ -S "$SOCKET_PATH" ]; then
        echo -e "${GREEN}✓${NC} Cache daemon started successfully (PID: $daemon_pid)"
        echo -e "${BLUE}You can now run other commands while the cache runs in the background${NC}"
        echo -e "${YELLOW}Use '$0 status' to check cache status${NC}"
        echo -e "${YELLOW}Use '$0 stop' to stop the cache daemon${NC}"

        # Try to load UBODT file
        echo "LOAD $ubodt_file $multiplier $max_memory" | nc -U "$SOCKET_PATH" 2>/dev/null
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}✓${NC} UBODT file queued for loading"
        else
            echo -e "${YELLOW}⚠${NC} Could not queue UBODT file load"
        fi

        return 0
    else
        echo -e "${RED}✗${NC} Failed to start cache daemon"
        kill $daemon_pid 2>/dev/null
        return 1
    fi
}

stop_cache() {
    echo -e "${BLUE}=== Stopping UBODT Cache ===${NC}"

    if [ -S "$SOCKET_PATH" ]; then
        echo "STOP" | nc -U "$SOCKET_PATH" 2>/dev/null
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}✓${NC} Cache daemon stop signal sent"

            # Wait for graceful shutdown
            local count=0
            while [ -S "$SOCKET_PATH" ] && [ $count -lt 10 ]; do
                sleep 1
                ((count++))
            done

            if [ ! -S "$SOCKET_PATH" ]; then
                echo -e "${GREEN}✓${NC} Cache daemon stopped gracefully"
            else
                echo -e "${YELLOW}⚠${NC} Cache daemon did not stop gracefully"
                # Force kill any remaining daemon processes
                pkill -f "ubodt_daemon_runner" 2>/dev/null
                rm -f "$SOCKET_PATH"
                echo -e "${YELLOW}⚠${NC} Cache daemon forcibly stopped"
            fi
        else
            echo -e "${RED}✗${NC} Could not communicate with daemon"
        fi
    else
        # Try to kill any running daemon processes
        if pkill -f "ubodt_daemon_runner" 2>/dev/null; then
            echo -e "${GREEN}✓${NC} Cache daemon processes terminated"
        else
            echo -e "${YELLOW}⚠${NC} No cache daemon processes found"
        fi
    fi

    # Clean up socket file
    rm -f "$SOCKET_PATH"
}

load_ubodt() {
    local ubodt_file="$1"
    local multiplier="${2:-50000}"
    local max_memory="${3:-0}"

    if [ -z "$ubodt_file" ]; then
        echo -e "${RED}Error: UBODT file path is required${NC}"
        echo "Usage: $0 load <ubodt_file> [multiplier] [max_memory_mb]"
        return 1
    fi

    echo -e "${BLUE}=== Loading UBODT File ===${NC}"

    if [ ! -S "$SOCKET_PATH" ]; then
        echo -e "${RED}✗${NC} Cache daemon is not running"
        echo -e "${YELLOW}Use '$0 start <ubodt_file>' to start the daemon${NC}"
        return 1
    fi

    echo "LOAD $ubodt_file $multiplier $max_memory" | nc -U "$SOCKET_PATH" 2>/dev/null
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✓${NC} UBODT file load command sent to daemon"
    else
        echo -e "${RED}✗${NC} Failed to communicate with daemon"
        return 1
    fi
}

show_help() {
    echo -e "${BLUE}UBODT Cache Manager${NC}"
    echo
    echo "Usage: $0 <command> [options]"
    echo
    echo "Commands:"
    echo -e "  ${GREEN}start <ubodt_file> [multiplier] [max_memory]${NC}"
    echo "    Start cache daemon and load UBODT file"
    echo "    Example: $0 start data/ubodt.txt 50000 2048"
    echo
    echo -e "  ${GREEN}stop${NC}"
    echo "    Stop cache daemon"
    echo
    echo -e "  ${GREEN}status${NC}"
    echo "    Show cache status"
    echo
    echo -e "  ${GREEN}load <ubodt_file> [multiplier] [max_memory]${NC}"
    echo "    Load additional UBODT file into running cache"
    echo
    echo -e "  ${GREEN}clear${NC}"
    echo "    Clear all cached UBODT files"
    echo
    echo -e "  ${GREEN}help${NC}"
    echo "    Show this help message"
    echo
    echo "Examples:"
    echo "  $0 start input/map/haikou_ubodt.txt"
    echo "  $0 status"
    echo "  $0 stop"
    echo
}

# Main command processing
case "${1:-help}" in
    start)
        start_cache "$2" "$3" "$4"
        ;;
    stop)
        stop_cache
        ;;
    status)
        print_status
        ;;
    load)
        load_ubodt "$2" "$3" "$4"
        ;;
    clear)
        if [ -S "$SOCKET_PATH" ]; then
            echo "CLEAR" | nc -U "$SOCKET_PATH" 2>/dev/null
            echo -e "${GREEN}✓${NC} Clear cache command sent"
        else
            echo -e "${RED}✗${NC} Cache daemon is not running"
        fi
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo -e "${RED}Error: Unknown command '$1'${NC}"
        echo
        show_help
        exit 1
        ;;
esac